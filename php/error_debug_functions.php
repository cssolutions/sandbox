<?php

//production logging
error_reporting(-1);
//ini_set("open_basedir", 0);
ini_set("display_errors", 1);
ini_set("log_errors", 1);
ini_set("error_log",  "/opt/lampp/logs/custom_error_log");

//check if catched exception is logged

try {
	trigger_error('Faszom');
} catch (Exception $ex) {
	echo 'Nincs is faszod!';
}

throw new \Exception('MÃ¡sikfaszom!');

//$b = $c;

//debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )
//return values:
//function 	string 	The current function name. See also __FUNCTION__.
//line 	integer 	The current line number. See also __LINE__.
//file 	string 	The current file name. See also __FILE__.
//class 	string 	The current class name. See also __CLASS__
//object 	object 	The current object.
//type 	string 	The current call type. If a method call, "->" is returned. If a static method call, "::" is returned. If a function call, nothing is returned.
//args 	array 	If inside a function, this lists the functions arguments. If inside an included file, this lists the included file name(s). 


class teszt {
	private $name;
	function __construct($name) {
		$this->name = $name;
	}
	function getName() {
		var_dump(debug_backtrace());  
		return $this->name;
	}
}

$person = new teszt('Csaba');
echo $person->getName();


//error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )
//
//0 	message is sent to PHP's system logger, using the Operating System's system logging mechanism or a file, depending on what the error_log configuration directive is set to. This is the default option.
//1 	message is sent by email to the address in the destination parameter. This is the only message type where the fourth parameter, extra_headers is used.
//2 	No longer an option.
//3 	message is appended to the file destination. A newline is not automatically added to the end of the message string.
//4 	message is sent directly to the SAPI logging handler. 


//error_reporting ([ int $level ] )
// Turn off all error reporting
//error_reporting(0);
//// Report simple running errors
//error_reporting(E_ERROR | E_WARNING | E_PARSE);
//// Reporting E_NOTICE can be good too (to report uninitialized
//// variables or catch variable name misspellings ...)
//error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);
//// Report all errors except E_NOTICE
//error_reporting(E_ALL & ~E_NOTICE);
//// Report all PHP errors (see changelog)
//error_reporting(E_ALL);
//// Report all PHP errors
//error_reporting(-1);
//// Same as error_reporting(E_ALL);
//ini_set('error_reporting', E_ALL);

//1 	E_ERROR (integer) 	Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted. 	 
//2 	E_WARNING (integer) 	Run-time warnings (non-fatal errors). Execution of the script is not halted. 	 
//4 	E_PARSE (integer) 	Compile-time parse errors. Parse errors should only be generated by the parser. 	 
//8 	E_NOTICE (integer) 	Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script. 	 
//16 	E_CORE_ERROR (integer) 	Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP. 	 
//32 	E_CORE_WARNING (integer) 	Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP. 	 
//64 	E_COMPILE_ERROR (integer) 	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine. 	 
//128 	E_COMPILE_WARNING (integer) 	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine. 	 
//256 	E_USER_ERROR (integer) 	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error(). 	 
//512 	E_USER_WARNING (integer) 	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error(). 	 
//1024 	E_USER_NOTICE (integer) 	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error(). 	 
//2048 	E_STRICT (integer) 	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code. 	Since PHP 5 but not included in E_ALL until PHP 5.4.0
//4096 	E_RECOVERABLE_ERROR (integer) 	Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR. 	Since PHP 5.2.0
//8192 	E_DEPRECATED (integer) 	Run-time notices. Enable this to receive warnings about code that will not work in future versions. 	Since PHP 5.3.0
//16384 	E_USER_DEPRECATED (integer) 	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error(). 	Since PHP 5.3.0
//32767 	E_ALL (integer) 	All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0. 	32767 in PHP 5.4.x, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously 

//error_get_last()

//error_cleat_last()