Differences:
    We can execute a stored procedure whenever we want with the help of the exec command, but a trigger can only be executed whenever an event (insert, delete, and update) is fired on the table on which the trigger is defined.
    We can call a stored procedure from inside another stored procedure but we can't directly call another trigger within a trigger. We can only achieve nesting of triggers in which the action (insert, delete, and update) defined within a trigger can initiate execution of another trigger defined on the same table or a different table.
    Stored procedures can be scheduled through a job to execute on a predefined time, but we can't schedule a trigger.
    Stored procedure can take input parameters, but we can't pass parameters as input to a trigger.
    Stored procedures can return values but a trigger cannot return a value.
    We can use Print commands inside a stored procedure for debugging purposes but we can't use print commands inside a trigger.
    We can use transaction statements like begin transaction, commit transaction, and rollback inside a stored procedure but we can't use transaction statements inside a trigger.
    We can call a stored procedure from the front end (.asp files, .aspx files, .ascx files, etc.) but we can't call a trigger from these files.
    Stored procedures are used for performing tasks. Stored procedures are normally used for performing user specified tasks. They can have parameters and return multiple results sets.
    The Triggers for auditing work: Triggers normally are used for auditing work. They can be used to trace the activities of table events.

DELIMITER $$
DROP PROCEDURE IF EXISTS search$$
CREATE PROCEDURE search()
    BEGIN
        DECLARE v_sid, v_type_id INT;
        DECLARE v_date DATE;
        DECLARE v_keyword VARCHAR(32);
        DECLARE v_cc CHAR(2);
        DECLARE v_type VARCHAR(6);
        DECLARE v_cur CURSOR FOR SELECT id, DATE_FORMAT(`timestamp`, '%Y-%m-01'), keyword, IFNULL(cc, ''), `type`, type_id FROM search LEFT JOIN search_places ON search.location_id = search_places.location_id;

        TRUNCATE TABLE search_selects;
        TRUNCATE TABLE search_stats;

        OPEN v_cur;
        loop1: LOOP
            FETCH v_cur INTO v_sid, v_date, v_keyword, v_cc, v_type, v_type_id;
            #select v_sid, v_date, v_keyword, v_cc, v_type, v_type_id; #console log
            INSERT INTO search_stats (`month`, `keyword`, `cc`, `count`) VALUES (v_date, v_keyword, v_cc, 1) ON DUPLICATE KEY UPDATE `count` = `count`+1;
            IF v_type != 'search' AND v_type_id IS NOT NULL THEN
                INSERT INTO search_selects (`month`, `keyword`, `type`, `type_id`, `cc`, `count`) VALUES (v_date, v_keyword, v_type, v_type_id, v_cc, 1) ON DUPLICATE KEY UPDATE `count` = `count`+1;
            END IF;
            IF v_sid IS NULL THEN
                LEAVE loop1;
            END IF;
        END LOOP;
        CLOSE v_cur;
    END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS fin_balance//
CREATE PROCEDURE fin_balance(IN flatId INT, OUT deposit INT, OUT foreseen_charge INT, OUT balance INT)
    BEGIN
        SELECT SUM(money) FROM deposits WHERE flatId = flatsId INTO deposit;
        SELECT SUM(commonCharge) FROM foreseen_charges WHERE flatId = flatsId INTO foreseen_charge;
        SELECT deposit-foreseen_charge INTO balance;
    END//
CALL fin_balance(45, @deposit, @foreseen_charge, @balance);
SELECT @deposit, @foreseen_charge, @balance;



//procedure that doesn't return value
CREATE PROCEDURE add_country (IN country_code CHAR(3),
                              IN country_name CHAR(52),
                              IN continent_name CHAR(30))
BEGIN
  INSERT INTO Country(Code, Name, Continent)
    VALUES (country_code, country_name, continent_name);
END;
#CALL add_country('ATL', 'Atlantis', 'North America')


//procedure that return one or more values
CREATE PROCEDURE get_pop (IN country_name CHAR(52),
                          OUT country_pop BIGINT)
BEGIN
  SELECT Population INTO country_pop FROM Country
    WHERE Name = country_name;
END;
#CALL get_pop('Uganda', @pop)
#SELECT @pop;
---------------
CREATE PROCEDURE get_pop_continent (IN continent_name CHAR(30), 
                                    OUT continent_pop BIGINT)
BEGIN
  SELECT SUM(Population) INTO continent_pop FROM Country
    WHERE Continent = continent_name;
END;
#CALL get_pop_continent('Asia', @pop)
#SELECT @pop;
---------------
CREATE PROCEDURE get_pop_world (OUT world_pop BIGINT)
BEGIN
  SELECT SUM(Population) INTO world_pop FROM Country;
END;
#CALL get_pop_world(@pop)
#SELECT @pop;



//procedure, that return one or more result sets
CREATE PROCEDURE get_data ()
BEGIN
  SELECT Code, Name, Population, Continent FROM Country
    WHERE Continent = 'Oceania' AND Population < 10000;
  SELECT Code, Name, Population, Continent FROM Country
    WHERE Continent = 'Europe' AND Population < 10000;
  SELECT Code, Name, Population, Continent FROM Country
    WHERE Continent = 'North America' AND Population < 10000;
END;
#CALL get_data()





















DELIMITER $$

USE `table_name`$$

DROP TRIGGER IF EXISTS `search_stats_insert`$$

CREATE
    TRIGGER `search_stats_insert` AFTER INSERT ON `search` 
    FOR EACH ROW BEGIN
	INSERT INTO search_stats (`month`, `keyword`, `cc`, `count`) VALUES (
		DATE_FORMAT(NEW.`timestamp`, '%Y-%m-01'),
		NEW.`keyword`,
		IFNULL((SELECT cc FROM `search_places` WHERE `location_id` = NEW.`location_id`), ''),
		1
	) ON DUPLICATE KEY UPDATE `count` = `count`+1;
	IF NEW.`type` != 'search' THEN
		INSERT INTO search_selects (`month`, `keyword`, `type`, `type_id`, `cc`, `count`) VALUES (
			DATE_FORMAT(NEW.`timestamp`, '%Y-%m-01'),
			NEW.`keyword`,
			NEW.`type`,
			NEW.`type_id`,
			IFNULL((SELECT cc FROM `search_places` WHERE `location_id` = NEW.`location_id`), ''),
			1
		) ON DUPLICATE KEY UPDATE `count` = `count`+1;
	END IF;
    END;
$$

DELIMITER ;