Optimizing data size
--------------------
Table columns:
-Use the most efficient (smallest) data types possible. MySQL has many specialized types that save disk space and memory. For example, use the smaller integer types if 
possible to get smaller tables. MEDIUMINT is often a better choice than INT because a MEDIUMINT column uses 25% less space.
-Declare columns to be NOT NULL if possible. It makes SQL operations faster, by enabling better use of indexes and eliminating overhead for testing whether each value is 
NULL. You also save some storage space, one bit per column. If you really need NULL values in your tables, use them. Just avoid the default setting that allows NULL values , 
in every column. 

Indexes:
-The primary index of a table should be as short as possible. This makes identification of each row easy and efficient. For InnoDB tables, the primary key columns are 
duplicated in each secondary index entry, so a short primary key saves considerable space if you have many secondary indexes.
-Create only the indexes that you need to improve query performance. Indexes are good for retrieval, but slow down insert and update operations. If you access a table 
mostly by searching on a combination of columns, create a single composite index on them rather than a separate index for each column. The first part of the index should
be the column most used. If you always use many columns when selecting from the table, the first column in the index should be the one with the most duplicates, to obtain better 
compression of the index. 

Joins:
-In some circumstances, it can be beneficial to split into two a table that is scanned very often. This is especially true if it is a dynamic-format table and it is 
possible to use a smaller static format table that can be used to find the relevant rows when scanning the table.
-Declare columns with identical information in different tables with identical data types, to speed up joins based on the corresponding columns. 


Optimizing data type
--------------------
Optimizing for numeric data
-prefer numeric columns to string columns

Optimizing for Strings
-When comparing values from different columns, declare those columns with the same character set and collation wherever possible
-For column values less than 8KB in size, use binary VARCHAR instead of BLOB
-If a table contains string columns such as name and address, but many queries do not retrieve those columns, consider splitting the string columns into a separate table 
and using join queries with a foreign key when necessary
-When you use a randomly generated value as a primary key in an InnoDB table, prefix it with an ascending value such as the current date and time if possible. When 
consecutive primary values are physically stored near each other, InnoDB can insert and retrieve them faster.
